#!/usr/bin/env python3

DEFAULT_CONFIG_DIR = '.sbu'
CONFIG_DIR_VAR = 'SBU_CONFIG_DIR'

import argparse
import calendar
import configparser
import json
import os
import re
import sys
import time

def main():
    # Parse command line arguments and read configuration file
    args = parse_arguments()
    config = configparser.ConfigParser()
    config.read(os.path.join(args.config_dir, 'config'))

    # Show default and quit
    if args.show_default:
        print(config['DEFAULT']['num_days_local_backups'])
        return 0

    # Read list of current local backups and filter for correct name
    filenames = [os.path.basename(f) for f in
            sorted(os.listdir(config['DEFAULT']['local_backup_dir']))]
    filenames = [f for f in filenames
            if re.match('sbu_snapshot_([0-9]+).tar', f)]

    # Filter for files which exceed the retention time
    num_days = (args.num_days if args.num_days
            else int(config['DEFAULT']['num_days_local_backups']))
    limit = time.time() - num_days * 24 * 3600
    filenames = [f for f in filenames
            if calendar.timegm(time.strptime(
                    re.match('sbu_snapshot_([0-9]+).tar', f).group(1),
                    '%Y%m%d%H%M%S')) < limit]

    # Re-add path
    filenames = [os.path.join(config['DEFAULT']['local_backup_dir'], f) for
            f in filenames]

    # Print filenames if dry-run is requested and quit
    if args.dry_run:
        for f in filenames:
            print(f)
        return 0

    # Delete all found files
    for f in filenames:
        os.remove(f)


def parse_arguments():
    p = argparse.ArgumentParser(
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    default_config = os.environ.get(CONFIG_DIR_VAR,
            os.path.join(os.path.expanduser('~'), DEFAULT_CONFIG_DIR))
    p.add_argument('-c', default=default_config, dest='config_dir',
            help='Path to configuration directory.')
    p.add_argument('--num-days', '-n', type=is_nonnegative_integer_arg,
            help=('Number of days for which to keep local backups. '
                  'If unspecified, use the value from the config file.'))
    p.add_argument('--show-default', action='store_true',
            help='Show the config value that will be used as default for "-n".')
    p.add_argument('--dry-run', action='store_true',
            help='Show files that exceed time limit but do not delete them.')
    return p.parse_args()


def is_nonnegative_integer_arg(s):
    try:
        int(s)
    except:
        raise argparse.ArgumentTypeError(
                "'{}' is not an integer".format(s))
    if int(s) < 0:
        raise argparse.ArgumentTypeError(
                "'{}' is not an non-negative integer".format(s))
    return int(s)


if __name__ == '__main__':
    sys.exit(main())

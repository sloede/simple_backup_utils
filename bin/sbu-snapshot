#!/usr/bin/env python3

DEFAULT_CONFIG_FILE_NAME = '.sburc'

import argparse
import configparser
import os
import shutil
import subprocess
import sys
import tarfile
import tempfile
import time

def main():
    # Parse command line arguments and read configuration file
    args = parse_arguments()
    config = configparser.ConfigParser()
    config.read(args.config)

    # Get list of backup scripts
    backup_scripts = sorted(
            find_backup_scripts(config['DEFAULT']['backup_script_dir']))

    # Determine snapshot filename
    timestamp = time.strftime('%Y%m%d%H%M%S', time.gmtime())
    snapshot_name = 'sbu_snapshot_' + timestamp
    snapshot_filename = os.path.join(
            config['DEFAULT']['local_backup_dir'], snapshot_name + '.tar')

    # Create temporary directory and create snapshot
    with tempfile.TemporaryDirectory() as temp_dir:
        # Create snapshot dir
        snapshot_dir = os.path.join(temp_dir, snapshot_name)
        os.mkdir(snapshot_dir, mode=0o700)

        # Run backup scripts, set file permissions, and store created filenames
        created_files = []
        for s in backup_scripts:
            p = subprocess.Popen([s, snapshot_dir, timestamp],
                    stdout=subprocess.PIPE, universal_newlines=True)
            out, _ = p.communicate()
            filename = out.strip()
            created_files.append(filename)
            filename_abs = os.path.join(snapshot_dir, filename)
            shutil.chown(filename_abs,
                    config['DEFAULT']['backup_user'],
                    config['DEFAULT']['backup_user'])
            os.chmod(filename_abs, 0o600)

        # Create README with manifest information
        with open(os.path.join(snapshot_dir, 'README'), 'w') as readme:
            readme.write("timestamp: {}\n".format(timestamp))
            readme.write("num_files: {}\n".format(len(created_files)))
            readme.write('\n')
            for script, filename in zip(backup_scripts, created_files):
                readme.write("{}: {}\n".format(script, filename))

        # Create snapshopt tarfile
        with tarfile.TarFile(snapshot_filename, 'w') as tar:
            tar.add(snapshot_dir, snapshot_name)

    # Set permissions for snapshot file
    shutil.chown(snapshot_filename,
            config['DEFAULT']['backup_user'], config['DEFAULT']['backup_user'])
    os.chmod(snapshot_filename, 0o600)

    # Return snapshot filename to stdout and quit
    print(snapshot_filename)
    return


def find_backup_scripts(backup_script_dir):
    rel_paths = os.listdir(backup_script_dir)
    full_paths = [os.path.join(backup_script_dir, p) for p in rel_paths]
    return [f for f in full_paths
            if os.path.isfile(f) and os.access(f, os.X_OK)]


def parse_arguments():
    p = argparse.ArgumentParser(
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    default_config = os.path.join(os.path.expanduser('~'),
            DEFAULT_CONFIG_FILE_NAME)
    p.add_argument('--config', '-c', default=default_config,
            help='Path to config file.')
    return p.parse_args()


if __name__ == '__main__':
    sys.exit(main())

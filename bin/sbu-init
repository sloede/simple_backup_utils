#!/bin/bash

CONFIG_DIR=$HOME/.sbu
ENCRYPTION_KEY_LENGTH=128
DEFAULT_BACKUP_USER=$USER
DEFAULT_LOCAL_BACKUP_DIR=backups
DEFAULT_BACKUP_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )/backups-enabled"
DEFAULT_AWS_CREDENTIALS_FILE=$HOME/.aws/credentials

################################################################################
# Backup user
################################################################################
echo -n "User name for local backups [$DEFAULT_BACKUP_USER]: "
read backup_user
if [ -z "$backup_user" ]; then
  backup_user=$DEFAULT_BACKUP_USER
fi
id -un $backup_user >/dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "error: user '$backup_user' does not exist" >&2
  exit 1
fi

################################################################################
# Local backup directory
################################################################################
if [ -d "/home/$backup_user" ]; then
  _default=/home/$backup_user/$DEFAULT_LOCAL_BACKUP_DIR
else
  _default=$HOME/$DEFAULT_LOCAL_BACKUP_DIR
fi
echo -n "Local backup directory [$_default]: "
read local_backup_dir
if [ -z "$local_backup_dir" ]; then
  local_backup_dir=$_default
fi
echo "Creating backup directory '$local_backup_dir'..."
mkdir -p $local_backup_dir
if [ $? -ne 0 ]; then
  echo "error: could not create backup directory" >&2
  exit 1
fi

################################################################################
# Directory with backup scripts to run
################################################################################
echo -n "Directory with backup scripts to run [$DEFAULT_BACKUP_SCRIPT_DIR]: "
read backup_script_dir
if [ -z "$backup_script_dir" ]; then
  backup_script_dir=$DEFAULT_BACKUP_SCRIPT_DIR
fi
if [ ! -d "$backup_script_dir" ]; then
  echo "error: directory '$backup_script_dir' does not exist" >&2
  exit 1
fi

################################################################################
# AWS credentials file
################################################################################
echo -n "Path to AWS credentials file [$DEFAULT_AWS_CREDENTIALS_FILE]: "
read aws_credentials_file
if [ -z "$aws_credentials_file" ]; then
  aws_credentials_file=$DEFAULT_AWS_CREDENTIALS_FILE
fi
if [ ! -f "$aws_credentials_file" ]; then
  echo "error: file '$aws_credentials_file' does not exist" >&2
  exit 1
fi

################################################################################
# AWS credentials file
################################################################################
while true; do
  echo -n "AWS glacier vault name: "
  read aws_vault_name
  if [ -n "$aws_vault_name" ]; then
    break
  fi
done

################################################################################
# Create configuration files
################################################################################
# Create folder for configuration files
echo "Creating directory for configuration files '$CONFIG_DIR'..."
mkdir -p $CONFIG_DIR
if [ $? -ne 0 ]; then
  echo "error: could not create configuration directory" >&2
  exit 1
fi

# Write configuration file
echo "Writing configuration to '$CONFIG_DIR/config'..."
cat << EOF > $CONFIG_DIR/config
[DEFAULT]
backup_user = $backup_user
local_backup_dir = $local_backup_dir
backup_script_dir = $backup_script_dir
aws_credentials_file = $aws_credentials_file
aws_vault_name = $aws_vault_name
EOF
if [ $? -ne 0 ]; then
  echo "error: could not write configuration" >&2
  exit 1
fi

# Store key
keyfile="$CONFIG_DIR/key"
echo "Generating encryption key and storing it to '$keyfile'..."
# Create key file and allow read/write only from user
touch $keyfile
if [ $? -ne 0 ]; then
  echo "error: could not create key file" >&2
  exit 1
fi
chmod 600 $keyfile
if [ $? -ne 0 ]; then
  echo "error: could not set permissions on key file" >&2
  exit 1
fi
# Write key to keyfile
$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/sbu-keygen \
  $ENCRYPTION_KEY_LENGTH \
  > $keyfile
if [ $? -ne 0 ]; then
  echo "error: could not write key to key file" >&2
  exit 1
fi
chmod 400 $keyfile
if [ $? -ne 0 ]; then
  echo "error: could not set permissions on key file" >&2
  exit 1
fi
